
==========================================================================
柴门网站框架技术白皮书（chaidoor c++ web framework technology white book）
--------------------------------------------------------------------------

目录：
开发及运行平台
采用的第三方组件
框架文件目录结构
框架原理
配置文件释义
c++处理流程
	GET模式
	POST模式
session机制
url规则
xml_instance实例文档结构
xsl文档结构
json结构
rewrite结构
API编写规则
开发新模块的方法
C++源代码编译


===========================================
开发及运行平台
===========================================
操作系统：FreeBSD10.0
开发语言：
	服务器端：C++,XSLT
	客户端：Javascript
	数据库：PostgreSQL


===========================================
采用的第三方组件
===========================================
programm name: clang++
lib name: libclang++
ports: with system
rev:3.3

-------------------------------------------
programm name: boost
lib name: libboost_*
ports: devel/boost_all
rev:1.52

-------------------------------------------
database name: postgre
lib name: libpqxx
ports: databases/postgresql93-server
description: database 
rev: 9.3

-------------------------------------------
programm name: fcgi(for development)
lib name: libfcgi
ports: www/fcgi
description: devel lib
rev: 2.4

-------------------------------------------
programm name: fcgid(web server)
lib name: mod_fcgid
ports: www/mod_fcgid
description: fcgi server
rev: 1.2

-------------------------------------------
programm name: ImageMagick 
lib name: Magick++
ports: graphics/ImageMagick
description: graphics lib
rev: 6.7.3-4

-------------------------------------------
programm name: msmtp
ports: mail/msmtp
description: send mail by command line
rev: 1.4.32 

-------------------------------------------
programm name: mutt
ports: mail/mutt
description: send mail by command line
rev: 1.4.2 


===========================================
框架文件目录结构
===========================================
chaidoor_cpp
	include/(对应src目录)
	src/
		admin/
			http_get_ajax_admin.cpp
			http_get_struct_admin.cpp
			http_post_admin.cpp
		ajax/
			api/
				http_get_ajax_api_base.cpp
				http_get_ajax_api_sms.cpp
				http_get_ajax_api_theme.cpp
				http_get_ajax_api_weixin.cpp
				http_post_ajax_api_sms.cpp
				http_post_ajax_api_weixin.cpp
			module/
				http_get_ajax_shoot.cpp
				http_get_ajax_sms.cpp
				http_post_ajax_module_article.cpp
				http_post_ajax_module_order.cpp
				http_post_ajax_module_payment.cpp
				http_post_ajax_module_product.cpp
				http_post_ajax_module_user.cpp
			spec/
				http_post_ajax_spec_mycart.cpp
			ajax.cpp
			http_get_ajax_admin.cpp
			http_get_ajax_maker.cpp
			http_get_ajax_spec.cpp
			http_post_ajax.cpp
			http_post_ajax_admin.cpp
			http_post_ajax_admin_maker.cpp
			http_post_ajax_api.cpp
			http_post_ajax_api_maker.cpp
			http_post_ajax_maker.cpp
			http_post_ajax_module.cpp
			http_post_ajax_module_maker.cpp
			http_post_ajax_spec.cpp
			http_post_ajax_spec_maker.cpp
		framework/
			chaidoor.cpp
			crypto.cpp
			curl_client.cpp
			database.cpp
			http_base.cpp
			image_handler.cpp
			login_module.cpp
			output.cpp
			query_string.cpp
			session.cpp
			static_variable.cpp
			tcpip.cpp
			upload.cpp
			urlform_parser.cpp
			utils_core.cpp
			utils_xml.cpp
			workflow.cpp
		http_get/
			http_get.cpp
			http_get_ajax_maker.cpp
			http_get_base.cpp
			http_get_maker.cpp
			http_get_module_maker.cpp
			http_get_struct_app.cpp
		http_post/
			http_post.cpp
			http_post_app.cpp
			http_post_base.cpp
			http_post_maker.cpp
			http_post_module_maker.cpp
			http_post_validation.cpp
		specpage/
			http_get_specpage_maker.cpp
			http_get_struct_specpage.cpp
			http_post_app_specpage.cpp
			http_post_specpage_maker.cpp
			login/
			misc/
			payment/
			register/
			tcpip/
			upload/
			user_panel/
		module/
			article/
			product/
		Makefile
		Makefile.release

------------------
chaidoor
------------------
	config/
		core/
			dbtable.xml
			errset.xml
			global.xml
			i18n.xml
			msgset.xml
			sqlset.xml
		admin/
			global.xml
			sqlset.xml
		module/
			article/
				global.xml
				sqlset.xml
			ad/
			...
		i18n/
			zh_cn/
				errset.xml
				msgset.xml
				i18n_core.xml
				i18n_admin.xml
				i18n_mod_ad.xml
				i18n_mod...
			zh_tw/
				...
			en/
			...

	docs/
		INSTALL
		create_tables_pg.sql
		createindex_pg.sql
		drop_tables_pg.sql
		insert_data.sql
		install.sh
		autoupdate.sh
		sqlautoupdate.sh
		updatingsql.sql
		provincecity.txt
		finance_class.txt
		rewrite.conf
		setval_data.sql

	fonts/
		luximb.ttf

	htdocs/
		errlog
		instance.xml
		favicon.ico
		fcgi-bin/
			chaidoor.fcgi
		js/
			common/
				common.js
				calendar.js
				editor.js
				editor_panel.js
				lang_map.js
				validation.js
				float_panel.js
				upload.js
				workflow.js
				jquery-1.8.3.min.js
				jquery.blockUI.js
				lunar.js
			admin/
				admin.js
				admin_float_panel.js
			app/
				main.js
			module/
				mod_ad.js
				...
				mod_user.js
		xsl/
			common/
				inc_common.xsl
				inc_common_content.xsl
				inc_common_forjs.xsl
				inc_common_pagination.xsl
				inc_common_search.xsl
				inc_common_utils.xsl
			admin/
				admin_content.xsl
				admin_index.xsl
				admin_list.xsl
				admin_portal.xsl
				admin_specpage.xsl
				inc/
					inc_admin_activitytype.xsl
					inc_admin_categorysetup.xsl
					inc_admin_changerootinfo.xsl
					inc_admin_ddlone.xsl
					...
			app/
				inc_app_appstruct.xsl
				inc_app_block.xsl
				inc_add_ddlmore.xsl
				inc_app_image_list.xsl
				inc_app_include.xsl
				inc_app_menus.xsl
				inc_app_module_template.xsl
				inc_app_user_panel.xsl
				inc_app_utils.xsl
				inc_app_workflow.xsl
				index.xsl
				portal.xsl
				specpage.xsl
				specpage/
			module/
				article/
					inc_content_article.xsl
					inc_content_reply_article.xsl
					inc_list_article.xsl
					inc_list_reply_article.xsl
					inc_mod_index.article.xsl
				product/
				...
		theme
			0/
				css/
				image/

			1/
				css/
				image/

			...

===========================================
框架原理
===========================================

===========================================
配置文件释义
===========================================



===========================================
c++处理流程
===========================================
	GET模式
		1. 每一个模块都有一个get文件在文件系统中，在Get类中有两个重要函数：handleFirst,handleLast。第一个函数主要处理后台结构中指定的SQL语句，第二个函数主要处理需要在C++中生成的数据结点（readdata)。如果数据全部在C++生成，则需在后台结构设置中将构件类型设为custom。
	POST模式

===========================================
session机制
===========================================
session采用双重存储机制，先保存到redis缓存服务器，如果缓存服务器出故障，使用数据库保存数据。
redis缓存服务器保存三种类型的数据：
1. 用户会话（session, user & guest)
2. 微信accesstoken
3. 游客常用网页

三种类型的数据存偖规则分别如下：
1. 用户会话：
	guest_privi__<domain>
	user_info__<domain>__<uniqueid>
	user_privi__<domain>__<uniqueid>

2. 微信accesstoken:
	wxaccesstoken__<domain>__<weixinacctid>

3. 游客常用网页：

===========================================
url规则
===========================================

首页：/index.htm (?mod=index)
模块首页：/mu1/index.htm (?mu1=name)
后台管理首页：/admin/index.htm (?mod=admin)
特殊页：/page/pagename.htm (?mod=page&specpage=pagename)

列表页(默认)：/mu1/mu2/mu3/list-ixid-pn.htm 
(?mu1=name&mu2=name&mu3=name&ixid=n&pn=n)

列表页(变体)：/mu1/mu2/mu3/list-i1-ixid-pn.htm 
(?mu1=name&mu2=name&mu3=name&i1=n&ixid=n&pn=n)

内容页：/mu1/mu2/mu3/cont-op-ixid-id.htm 
(?mu1=name&mu2=name&mu3=name&op=n&ixid=n&id=n)

模块特殊页：/mu1/mu2/mu3/spec,pagename/op-ixid-id.htm 
(?mu1=name&mu2=name&mu3=name&spec=pagename&op=n&ixid=n&id=n)

mod=page[ page | inmain | index | admin | api ]

	mod: 如果有这个参数，一般是特殊页。模块页不需要此参数，模块名一般是menu1
	
	parameters:
		page: special page with sql query. the url must has 'specpage' parameter(userpanel also be in this parameter).
		inmain: special page without validation and sql query. it handle data in the main.cpp. the url must has 'specpage' parameter.
		index: this page is index of website.
		admin: admin operating.  
		api: api almost is ajax struct.

cateid=[1,...]

	cateid: is a category id. almost page is require it.

pn=[1,...]		(for list only)

	pn: is page number of list.

ixid=[1,...]	[for list or bill only]

	ixid: is a parent category id,it mean this is a bill page with replies.
	
id=[1,...]		[for content only]

	id: is a record id.

op=[1 | 2 | 3 | 4 | 5 | 6]
	op: is operator.
	1 = view, 2=add, 3=edit, 4=not use,5=manage,6=workflow


s1,s2,s3=[string]
	pass the string parameter.

i1,i2,i3=[integer]
	pass the integer parameter.

b1,b2,b3=[boolean]
	pass the boolean parameter.

sch=key1~expr~[!~!]val1---key2~expr~[!~!]val2---moduletype~~typeval)
	key: field of table
	val: field of value
	~expr~ : expression, the values: eq,lt,gt,lk
	!~! : optional,it equals a apos('). you must be with it if the value of field is a string or the expr is 'lk'.
	---: split of variables.
	moduletype~~: this is a const variable.

upload url
	i1 = atta
	i2 = w_tag_id
	i3 = 1:common,2:file
	i4 = w_filecatalog_id
	s1 = ver

	if has i3 then display one file field, otherwise five field

	/page/i1,1/i3,1/upload-0.htm (ad direct upload)
	/page/i3,1/upload-0.htm (tiaozao direct upload)
	/page/upload-0.htm (album five file upload)

ajax:
	mod=page[ page | inmain | index | admin | api ]
	isajax=1 (required)

	rtype= json | string | none (default: json)

	permit= app | admin | all (default: app)

生成一级菜单时的url规则：
	1. 首先检查link_type是否=url，是则取此值作为链接。
	2. 然后检查link_type是否=customPage，是则取此值处理成链接。
	3. 然后检查has_mod_index参数是否为空，若非空则说明该栏目中有模块首页，生成此链接。
	4. 然后检查has_mod_spec参数是否空，若非空说明该栏目中有模块特殊页，生成此链接。
	5. 以上检查均否，则生成模块列表页的链接。 

===========================================
form规则
===========================================

required fields:
----------------
	nm : table number (<input type="hidden" name="nm" value="210"/>)
	iud : operator (<input type="hidden" name="iud" value="2"/>)
			2=insert, 3=update, 4=delete
	rurl : redirect url (<input type="hidden" name="url" value="urlvalue"/>)

if insert more line data into db from a select control,
you must add a attribute named 'moreInsert' to the select control. 

validation
-----------
	validation='functionName,functionName=val'
	functionName: a script expression to verify.
	e.g:<input name="show_name" validation="isNotNull,maxLength=20"/>

---------------------------------------------------
  after post operation
---------------------------------------------------
form element: rurl (redirect url)
1.rurl is none or empty (reload current page, default operate)
1.rurl=norefresh (no redirect any url, in c++ set qsstatus["ispost"] = false)
3.rurl=gotoedit (goto edit page,only under add page operate)
4.rurl=url (specify a url)
5.rurl=close (close current page)


===========================================
xml_instance实例文档结构
===========================================
<root userFlag="guest" verifyCode="202">
	<i18n lang="gd"><n id="add">...</n></i18n>
	<errset lang="gb"><err id="noprivilege">...</err></errset>
	<msgset lang="gb"><msg id="noprivilege">...</msg></msgset>

	<menu>
		<mu1 name="siteInex" linkType="siteInex" moduleType="" linkAddr="" isNewWindow="f" tablenm="0" hasModIndex="" cateid="1"/>
		<mu1 name="news"><mu2 name="weeding" linkType="module" .../></mu1>
	</menu>

	<struct siteStyle="default" pageType="3" cateid="8">
		<container location="1" size="950" rank="0">
			<section sectionType="2" hasHead="f" hasPagination="f" internalType="1" iscal="f" handler="header"></section>
		</container>
	</struct>

	<!-- append the form node if has post error -->
	<form>
		<fd name=""></fd>
		<fd name=""></fd>
	</form>

	<forClient>
		<queryString>mu1=bbs&nm=210&cateid=7</queryString>
		<requestUri>/bbs/210-7-index.htm</requestUri>
		<qs cateid="7" mu1="bbs" pn="" mod=""/>
	</forClient>

	<globalInfo guests="1" users="2"/>
	<userInfo ip="127.0.0.1" unique="..." username="guest"/>
	<userPrivi><p has_mod_index="" hasedit="f"/>...</userPrivi>

</root>


===========================================
xsl文档结构
===========================================
模块页文件名命名规则：
模块首页：inc_mod_index_modname.xsl
列表页：inc_list_modname.xsl
子列表页：inc_sub_list_modname.xsl
内容页：inc_content_modname.xsl
子内容页：inc_sub_content_modname.xsl
特殊页：inc_spec_modname.xsl
区块页：inc_mod_modname_block.xsl
扩展页：inc_mod_modname_extra.xsl


===========================================
Ajax 处理规则
===========================================
Ajax Url 规则：
	param:
		mod = admin | app | api | moduleName [require]
		specpage = pageName [require]
		isajax = 1 [require]
		rtype = json | xml | string [optional, none is json for default]

	eg.:
	fcgi: chaidoor.fcgi?mod=app&specpage=pageName&isajax=1&rtype=json
	rewrite: http://yourdomain/app/pagename/ajax-json.htm


json结构:

空结构：{"json":[]}
单段单行结构：{"json":[{"key1":"val1"},{"key2":"val2"}]}
单段多行结构：{"json":[{"r0":[{"key1":"val1"},{"key2":"val2"}]},
					   {"r1":[{"key1":"val1"},{"key2":"val2"}]}
			  }
多段单行结构：{"json":[{"secName1":[{"key1":"val1"},{"key2":"val2"}]},
					   {"secName2":[{"key1":"val1"},{"key2":"val2"}]}
			  }

多段多行结构：{"json":[{"secName1":[
						{"r0":[{"key1":"val1"},{"key2":"val2"}]},
					    {"r1":[{"key1":"val1"},{"key2":"val2"}]}
						]},
				       {"secName2":[
						{"r0":[{"key1":"val1"},{"key2":"val2"}]},
					    {"r1":[{"key1":"val1"},{"key2":"val2"}]}
						]}
			  }

string 结构：
错误结构：ERROR:errorNumber
操作成功返回值：ok


===========================================
rewrite结构
===========================================
见rewrite.conf文件

===========================================
API编写规则
===========================================
编写API接口可供其他程序跨网站读写数据，chaidoor框架内置了API处理机制，编写时需要遵守一些必要的约定。

url规则：
前置部分：domain + /fcgi-bin/chaidoor.fcgi?mod=api&specpage=apiName&rtype=string [json | xml][&isajax=1]
后置部分：指定API的数据结构

----------------
短信接口文档
----------------
url前置部分：domain + /fcgi-bin/chaidoor.fcgi?mod=api&specpage=sms&rtype=string&isajax=1
url后置部分数据结构：
	msg=[短信内容，不能为空，最多70个汉字，160英文字符]
	mobilenumber=[手机号码，不能为空，多个号码用逗号隔开，最多100个号码]
	sign=[签名，SHA256加密的字符串,不能为空，(签名生成方式：从/config/core/common.xml文件中取节点/root/baseDataForClient/loginName和/root/baseDataForClient/fingerprint的内容，连接成一个字符串，然后用SHA256加密)]
	timing=[定时发送时间，可以不加此字段，加了后不能为空，格式：yyyy-mm-dd tt:mm:ss]

返回信息：成功返回OK。出错则返回错误代码

错误代码：100-199,表示API验证数据出错，四位数编号表示短信接口商的错误代码

----------------
模板主题接口文档
----------------
url前置部分：domain +
/fcgi-bin/chaidoor.fcgi?mod=api&specpage=theme&rtype=json&isajax=1
url后置部分数据结构：
	s1=[themestyle,主题风格]
	s2=[colorsystem,色系]
	s3=[industrytype,行业]
	sign=[签名，SHA256加密的字符串,不能为空，(签名生成方式：从/config/core/common.xml文件中取节点/root/baseDataForClient/loginName和/root/baseDataForClient/fingerprint的内容，连接成一个字符串，然后用SHA256加密)]

---------------------
添加新API需修改的文件
---------------------
1) 在c++项目include/ajax/api目录中新建http_get_ajax_api_apiName.hpp
(api一般为get模式，若有post操作可在此目录中添加post文件）。
2）在c++项目src/ajax/api目录中新建http_get_ajax_api_apiName.cpp。
3）在include/ajax/http_get_ajax_maker.hpp文件中加入新API的头文件。
4）在src/ajax/http_get_ajax_maker.cpp文件中加入新API的处理代码。
5）修改src/ajax/api/http_get_ajax_api_apiName.cpp文件。

===========================================
开发新模块的方法
===========================================

步骤：
1）根据业务逻辑新建模块数据库表，用自动生成程序生成语句后导入库中。
2）写C++业务逻辑模块
	a. 在/include/module目录中建模块目录，如:yourmod
		在此目录中添加头文件,一般是两个文件：
			（1）http_get_mod_yourmod.hpp
			（2）http_post_mod_yourmod.hpp
		注意：ajax post 模式，需要在/include/ajax/module/目录中添加：
			http_post_ajax_module_yourmod.hpp

	b. 打开/include/http_get/http_get_module_maker.hpp文件,添加:
		#include http_get_mod_yourmod.hpp

	c. 打开/include/http_post/http_post_module_maker.hpp文件,添加:
		#include http_post_mod_yourmod.hpp
		注意：ajax post 模式，
			则打开 /include/ajax/http_post_ajax_module_maker.hpp,添加：
			#include ajax/module/http_post_ajax_module__yourmod.hpp


	d. 在/src/module目录中建模块目录，如：yourmod
		在此目录中添加实现文件,一般是两个文件,对应头文件：
			（1）http_get_mod_yourmod.cpp
			（2）http_post_mod_yourmod.cpp
		注意：ajax post 模式，需要在/src/ajax/module/目录中添加：
			http_post_ajax_module_yourmod.cpp

	e. 打开/src/http_get/http_get_module_maker.cpp文件,添加:
		else if(modName == "yourModName")
			return new HttpGetModYourmodname;
	f. 打开/src/http_post/http_post_module_maker.cpp文件,添加:
		else if(modName == "yourModName")
			retur new HttpPostModYourmodname;

		注意：ajax post 模式，
		则在 /src/ajax/http_post_ajax_module_maker.cpp中添加代码:
		else if(modName == "yourModName")
			retur new HttpPostAjaxModuleYourmodname;


3）写配置文件：
	(a) 在/config/module/yourmod目录中新建global.xml, sqlset.xml两个文件，根据实际情况添加内容。
	(b) 在/config/i18n/zh_cn目录中新建i18n_mod_youmod.xml。

4）写js文件，在/htdocs/js/module中新建mod_yourmod.js文件。

5）写xsl文件，在/htdocs/xsl/module中新建yourmod目录,然后添加相应的文件，一般是两个文件：
	（a）list_yourmod.xsl
	（b）content_yourmod.xsl

	然后在/htdocs/xsl/app/inc_app_module_template.xsl中添加模板调用代码

6）进入框架后台，添加新栏目，设置栏目权限，以及新建结构，容器和构件等操作。

---------------------------------------------------
	struct of main.cpp 
---------------------------------------------------
1. copy right
2. global variable

	StaticVariableStruct svs
	{
		xercesc::DOMDocument* common 
		xercesc::DOMDocument* global
		xercesc::DOMDocument* dbtable
		xercesc::DOMDocument* sqlset
		xercesc::DOMDocument* errset 
		xercesc::DOMDocument* msgset

		map<string,DOMDocument*> xslset

		bool isInitFinished = false
	}

	unsigned long int count = 0

3. handling procedure
	STEP-1
		create QueryString varible qs,qs_status,
		create cookie
		create http doc head

	STEP-2 
		initializing
		construct StaticVariableStruct object
		(
			1.read & parse config/core/* (six files)
			2.read & parse config/admin/* (five files),append this document root node to config/core document root
			3. read & parse xsl files, then put into xslset map
		)
		
		--- variable ---
		string out_type = "xml_xsl"	//xml_xsl,post_xml_xsl,json,html,xml
		string out_text;
		string page_type("1");
		map<string,string> form;

		svs.init();

	STEP-3 
		check url,
		create CommonVariableStruct object,
		initializing database,
		check form
		upload
	
	STEP-4
		create session

	STEP-5
		create instance xml 

	STEP-6
		output result

4. cleaning

---------------------------------------------------
	data struct	
---------------------------------------------------
---------------------------------------------------
  user variable
---------------------------------------------------
map<> userInfo[userId,userName]
vector userPrivi[map<> [cateId,pageId,hasView,hasAdd,hasEdit,hasDelete,hasWf]

---------------------------------------------------
  output json format 
---------------------------------------------------
list:

{"json":[{"jsonName1":[{"r0":[{"fd1key":"fd1val","fd2key":"fd2val"}],"r1":[{"fd1key":"fd1val","fd2key":"fd2val"}]}],"jsonName2":[]}]}

===========================================
模块中使用工作流需要修改的文件
===========================================
1) 在模块的config/mod_modname/sqlset.xml文件中加入工作流专用语句。
2) 在模块的js/module/mod_modname.js中加入处理函数。
3) 在模块的c++代码中参考其他工作流文件加入标准处理语句。
4）在模块的xsl文件中加入标准处理语句。

===========================================
C++源代码编译
===========================================
项目的C＋＋源代码位于一个独立的SVN项目中，目录结构为：
inculde  -- 头文件
src -- 源文件
debug -- 存放编译好的带调试功能的可执行程序
release -- 存放编译好的带正式版可执行程序

编译命令：
1) 进入项目根目录
2) 在命令行中执行：make
	(此命令将读取Makefile文件进行编译）

	或者执行 make -f Makefile.release
	(此命令将读取指定的文件Makefile.release 进行编译)

===========================================
SSL 证书相关
===========================================
微信证书的制作：
私钥：
openssl pkcs12 -nocerts -nodes -in apiclient_cert.p12 -out
apiclient_private.pem

公钥：
openssl pkcs12 -clcerts -nokeys -in apiclient_cert.p12 -out apiclient_cert.pem

以上命令都需要输入密码，密码为商户号。


